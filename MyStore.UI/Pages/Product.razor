@page "/product/{Id:guid}"
@using MyStore.UI.Models
@using MyStore.UI.Services
@using Blazorise.Icons.FontAwesome

@inject IProductsServiceProxy ProductsServiceProxy

@if (_storeItemInfo is not null)
{
    <CardBody>
        <CardText>
            <Div>
                Наименование: <TextEdit @bind-Text="@_storeItemInfo.Name" />
            </Div>
            <Div>
                Описание: <TextEdit @bind-Text="@_storeItemInfo.Description"/>
            </Div>
        </CardText>
        <button type="button" class="btn btn-primary" @onclick="UpdateProduct">Сохранить</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteProduct">Удалить</button>
    </CardBody>
}
else
{
    <h3>Загружаем продукт...</h3>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    public StoreItemInfo? _storeItemInfo;

    protected override async Task OnInitializedAsync()
    {
        var product = await ProductsServiceProxy.GetProductById(Id);

    }
    async Task DeleteProduct()
    {
        await ProductsServiceProxy.DeleteProduct(Id);
    }

    async Task UpdateProduct()
    {
        var product = await ProductsServiceProxy.GetProductById(Id);

        _storeItemInfo.Id = Id;
        _storeItemInfo.Name = product.Name;
        _storeItemInfo.Description = product.Description;

        await ProductsServiceProxy.UpdateProduct(_storeItemInfo);
    }

}
